//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var VerificationCodes = newVerificationCodesTable("", "verification_codes", "")

type verificationCodesTable struct {
	sqlite.Table

	// Columns
	Email       sqlite.ColumnString
	Fingerprint sqlite.ColumnString
	Code        sqlite.ColumnString
	CreatedAt   sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type VerificationCodesTable struct {
	verificationCodesTable

	EXCLUDED verificationCodesTable
}

// AS creates new VerificationCodesTable with assigned alias
func (a VerificationCodesTable) AS(alias string) *VerificationCodesTable {
	return newVerificationCodesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VerificationCodesTable with assigned schema name
func (a VerificationCodesTable) FromSchema(schemaName string) *VerificationCodesTable {
	return newVerificationCodesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VerificationCodesTable with assigned table prefix
func (a VerificationCodesTable) WithPrefix(prefix string) *VerificationCodesTable {
	return newVerificationCodesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VerificationCodesTable with assigned table suffix
func (a VerificationCodesTable) WithSuffix(suffix string) *VerificationCodesTable {
	return newVerificationCodesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVerificationCodesTable(schemaName, tableName, alias string) *VerificationCodesTable {
	return &VerificationCodesTable{
		verificationCodesTable: newVerificationCodesTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newVerificationCodesTableImpl("", "excluded", ""),
	}
}

func newVerificationCodesTableImpl(schemaName, tableName, alias string) verificationCodesTable {
	var (
		EmailColumn       = sqlite.StringColumn("email")
		FingerprintColumn = sqlite.StringColumn("fingerprint")
		CodeColumn        = sqlite.StringColumn("code")
		CreatedAtColumn   = sqlite.IntegerColumn("created_at")
		allColumns        = sqlite.ColumnList{EmailColumn, FingerprintColumn, CodeColumn, CreatedAtColumn}
		mutableColumns    = sqlite.ColumnList{EmailColumn, FingerprintColumn, CodeColumn, CreatedAtColumn}
	)

	return verificationCodesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Email:       EmailColumn,
		Fingerprint: FingerprintColumn,
		Code:        CodeColumn,
		CreatedAt:   CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
