//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var EmailPermissions = newEmailPermissionsTable("", "email_permissions", "")

type emailPermissionsTable struct {
	sqlite.Table

	// Columns
	GranterEmail sqlite.ColumnString
	GranteeEmail sqlite.ColumnString
	CreatedAt    sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type EmailPermissionsTable struct {
	emailPermissionsTable

	EXCLUDED emailPermissionsTable
}

// AS creates new EmailPermissionsTable with assigned alias
func (a EmailPermissionsTable) AS(alias string) *EmailPermissionsTable {
	return newEmailPermissionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EmailPermissionsTable with assigned schema name
func (a EmailPermissionsTable) FromSchema(schemaName string) *EmailPermissionsTable {
	return newEmailPermissionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EmailPermissionsTable with assigned table prefix
func (a EmailPermissionsTable) WithPrefix(prefix string) *EmailPermissionsTable {
	return newEmailPermissionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EmailPermissionsTable with assigned table suffix
func (a EmailPermissionsTable) WithSuffix(suffix string) *EmailPermissionsTable {
	return newEmailPermissionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEmailPermissionsTable(schemaName, tableName, alias string) *EmailPermissionsTable {
	return &EmailPermissionsTable{
		emailPermissionsTable: newEmailPermissionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newEmailPermissionsTableImpl("", "excluded", ""),
	}
}

func newEmailPermissionsTableImpl(schemaName, tableName, alias string) emailPermissionsTable {
	var (
		GranterEmailColumn = sqlite.StringColumn("granter_email")
		GranteeEmailColumn = sqlite.StringColumn("grantee_email")
		CreatedAtColumn    = sqlite.TimestampColumn("created_at")
		allColumns         = sqlite.ColumnList{GranterEmailColumn, GranteeEmailColumn, CreatedAtColumn}
		mutableColumns     = sqlite.ColumnList{GranterEmailColumn, GranteeEmailColumn, CreatedAtColumn}
	)

	return emailPermissionsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		GranterEmail: GranterEmailColumn,
		GranteeEmail: GranteeEmailColumn,
		CreatedAt:    CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
